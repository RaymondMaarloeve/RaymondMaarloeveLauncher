name: Build & Release

on:
  push:
    branches: [main, workflow]

jobs:
  build:
    name: Build artifacts
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: windows-latest
            rid: win-x64
            artifact: RaymondMaarloeve.exe
          - os: ubuntu-latest
            rid: linux-x64
            artifact: RaymondMaarloeve.AppImage

    steps:
      - name: Checkout source
        uses: actions/checkout@v3

      - name: Get commit history since last release
        id: changelog
        run: |
          # Get the last tag (release), or fallback to the first commit if no tags are found
          LAST_RELEASE=$(git describe --tags --abbrev=0 2>/dev/null || git rev-list --max-parents=0 HEAD)
          echo "Last release: $LAST_RELEASE"

          # Get the commit log from the last release to the current commit
          COMMITS=$(git log $LAST_RELEASE..HEAD --oneline)
          echo "Commits since last release:"
          echo "$COMMITS"

          # Save the commit log to a markdown file with additional information
          echo "# Release Changelog for ${{ github.repository }}" > $RUNNER_TEMP/commits.md
          echo "Release Date: $(date '+%Y-%m-%d %H:%M:%S')" >> $RUNNER_TEMP/commits.md
          echo "### Changelog for Game build:" >> $RUNNER_TEMP/commits.md
          echo "$COMMITS" >> $RUNNER_TEMP/commits.md

      - name: Setup .NET 9.0 SDK
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '9.0.x'

      - name: Restore dependencies
        run: dotnet restore

      - name: Publish (${{ matrix.rid }})
        env:
          ARCH: x86_64
        run: |
          # Publish single-file self-contained
          dotnet publish ./YourSolution.sln \
            -c Release \
            -r ${{ matrix.rid }} \
            --self-contained true \
            -p:PublishSingleFile=true \
            -o publish

          if [ "${{ matrix.os }}" = "ubuntu-latest" ]; then
            # Download AppImageTool
            wget -q https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-x86_64.AppImage
            chmod +x appimagetool-x86_64.AppImage

            # Prepare AppDir
            mkdir -p AppDir/usr/bin
            cp publish/* AppDir/usr/bin/
            cp RaymondMaarloeve.desktop AppDir/
            cp icon.png AppDir/
            cp AppRun AppDir/
            chmod +x AppDir/AppRun


      - name: Build AppImage
        if: matrix.os == 'ubuntu-latest'
        run: |
          ./appimagetool-x86_64.AppImage AppDir RaymondMaarloeve.AppImage
          mv RaymondMaarloeve.AppImage publish/

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.rid }}
          path: publish/${{ matrix.artifact }}

  release:
    name: Create GitHub Release
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Download Windows EXE
        uses: actions/download-artifact@v4
        with:
          name: win-x64
          path: art/windows

      - name: Download Linux AppImage
        uses: actions/download-artifact@v4
        with:
          name: linux-x64
          path: art/linux

      - name: Get current date and time
        id: datetime
        run: echo "::set-output name=current_datetime::$(date '+%Y-%m-%d-%H%M%S')"

      - name: Create release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: release-${{ steps.datetime.outputs.current_datetime }}
          release_name: Release ${{ steps.datetime.outputs.current_datetime }}
          body_path: ${{ runner.temp }}/commits.md
          draft: false
          prerelease: false

      - name: Upload Windows EXE
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: art/windows/RaymondMaarloeve.exe
          asset_name: RaymondMaarloeve-${{ steps.datetime.outputs.current_datetime }}.exe
          asset_content_type: application/octet-stream

      - name: Upload Linux AppImage
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: art/linux/RaymondMaarloeve.AppImage
          asset_name: RaymondMaarloeve-${{ steps.datetime.outputs.current_datetime }}.AppImage
          asset_content_type: application/x-executable
